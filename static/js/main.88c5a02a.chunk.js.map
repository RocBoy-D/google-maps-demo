{"version":3,"sources":["Map.js","App.js","reportWebVitals.js","index.js"],"names":["Map","style","ref","useRef","useState","map","setMap","marker","setMarker","markerPos","getPosition","onClick","useCallback","e","position","latLng","newMarker","window","google","maps","Marker","useEffect","current","mapInstance","center","lat","lng","zoom","navigator","geolocation","getCurrentPosition","currentPosition","coords","latitude","longitude","defaultMarker","setCenter","event","clearListeners","addListener","App","apiKey","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAoEeA,EAlEH,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACLC,EAAMC,iBAAO,MACnB,EAAsBC,qBAAtB,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,qBAA5B,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAS,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAQG,cAEpBC,EAAUC,uBAAY,SAACC,GACzB,IAAMC,EAAWD,EAAEE,OACbC,EAAY,IAAIC,OAAOC,OAAOC,KAAKC,OAAO,CAAEN,WAAUT,QAE5DE,GAAUA,EAAOD,OAAO,MACxBE,EAAUQ,KACX,CAACX,EAAKE,IA0CT,OAxCAc,qBAAU,WACN,GAAInB,EAAIoB,UAAYjB,EAAK,CAAC,IAAD,EACfkB,EAAc,IAAIN,OAAOC,OAAOC,KAAKnB,IAAIE,EAAIoB,QAAS,CACxDE,OAAQ,CAAEC,IAAK,QAASC,IAAK,SAC7BC,KAAM,KAGV,UAAAC,UAAUC,mBAAV,SAAuBC,oBAAmB,SAAAhB,GACtC,IAAMiB,EAAkB,CACpBN,IAAKX,EAASkB,OAAOC,SACrBP,IAAKZ,EAASkB,OAAOE,WAEnBC,EAAgB,IAAIlB,OAAOC,OAAOC,KAAKC,OAAO,CAChDN,SAAUiB,EACV1B,IAAKkB,IAGTA,EAAYa,UAAUL,GACtBvB,EAAU2B,MAGd7B,EAAOiB,MAEZ,CAACrB,EAAKG,IAETgB,qBAAU,WACFhB,IACAY,OAAOC,OAAOC,KAAKkB,MAAMC,eAAejC,EAAK,SAC7CA,EAAIkC,YAAY,QAAS5B,MAE9B,CAACN,EAAKM,IAETU,qBAAU,WACN,OAAO,WACCd,GACAA,EAAOD,OAAO,SAGvB,CAACC,IAGA,qCACI,qBAAKL,IAAKA,EAAKD,MAAOA,IACrBM,GACG,sCACUE,EAAUgB,MADpB,UACkChB,EAAUiB,a,MC/C7Cc,MARf,WACE,OACE,cAAC,UAAD,CAASC,OAAO,0CAAhB,SACE,cAAC,EAAD,CAAKxC,MAAO,CAAEyC,OAAQ,cCGbC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.88c5a02a.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\r\n\r\nconst Map = ({ style }) => {\r\n    const ref = useRef(null);\r\n    const [map, setMap] = useState();\r\n    const [marker, setMarker] = useState();\r\n    const markerPos = marker?.getPosition();\r\n\r\n    const onClick = useCallback((e) => {\r\n        const position = e.latLng;\r\n        const newMarker = new window.google.maps.Marker({ position, map });\r\n\r\n        marker && marker.setMap(null);\r\n        setMarker(newMarker);\r\n    }, [map, marker]);\r\n\r\n    useEffect(() => {\r\n        if (ref.current && !map) {\r\n            const mapInstance = new window.google.maps.Map(ref.current, {\r\n                center: { lat: 47.0105, lng: 28.8638 },\r\n                zoom: 14\r\n            });\r\n    \r\n            navigator.geolocation?.getCurrentPosition(position => {\r\n                const currentPosition = {\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.longitude\r\n                };\r\n                const defaultMarker = new window.google.maps.Marker({\r\n                    position: currentPosition,\r\n                    map: mapInstance\r\n                });\r\n\r\n                mapInstance.setCenter(currentPosition);\r\n                setMarker(defaultMarker);\r\n            });\r\n            \r\n            setMap(mapInstance);\r\n        }\r\n    }, [ref, map]);\r\n\r\n    useEffect(() => {\r\n        if (map) {\r\n            window.google.maps.event.clearListeners(map, 'click');\r\n            map.addListener(\"click\", onClick);\r\n        }\r\n    }, [map, onClick]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (marker) {\r\n                marker.setMap(null);\r\n            }\r\n        };\r\n    }, [marker]);\r\n\r\n    return (\r\n        <>\r\n            <div ref={ref} style={style}></div>\r\n            {marker && (\r\n                <p>\r\n                    lat: {markerPos.lat()}, lng: {markerPos.lng()}\r\n                </p>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Map;","import { Wrapper } from '@googlemaps/react-wrapper';\n\nimport Map from './Map';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Wrapper apiKey=\"AIzaSyAkqnLqxa3vuJnwqOuT58OGIkviRx4g8B8\">\n      <Map style={{ height: \"500px\" }} />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}